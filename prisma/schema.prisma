generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Person {
  id String @id @default(cuid())

  firstName     String?
  lastName      String
  birthLastName String? // e.g., for women who change their last name after marriage

  isAlive Boolean @default(true)

  gender               String?
  nationality          String?
  ethnicity            String?
  religiousAffiliation String?

  outgoingRelationships Relationship[] @relation("Source Person")
  incomingRelationships Relationship[] @relation("Target Person")

  professions Profession[]
  photos      Photo[]
  documents   Document[]
  residences  Residence[]
  events      Event[]

  note String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([lastName, firstName]) // Optimize name searches in this order too
  @@index([birthLastName]) // For maiden name searches
  @@index([isAlive]) // For filtering living/deceased
}

model Relationship {
  id String @id @default(cuid())

  sourcePersonId String
  sourcePerson   Person @relation("Source Person", fields: [sourcePersonId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  targetPersonId String
  targetPerson   Person @relation("Target Person", fields: [targetPersonId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  type String // e.g., parent, child, sibling, partner, ex-partner, spouse, ex-spouse

  note String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sourcePersonId, targetPersonId, type]) // For finding specific relationships
  @@index([type]) // For filtering by relationship type
}

model Profession {
  id String @id @default(cuid())

  name        String
  description String?

  note String?

  persons Person[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name]) // Index for searching by profession name
}

model Residence {
  id String @id @default(cuid())

  name        String
  description String?

  country        String
  state          String?
  city           String?
  street         String?
  buildingNumber String?
  postalCode     String?
  coordinates    String?

  note String?

  persons Person[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([country, state, city]) // For hierarchical location searches
  @@index([postalCode]) // For geographic grouping
}

model Photo {
  id String @id @default(cuid())

  name        String
  description String?

  altText String?

  fileName    String @unique
  contentType String
  blob        Bytes

  type String? // e.g., portrait, group photo, event photo

  note String?

  persons Person[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name]) // For photo name searches
  @@index([type]) // For filtering by photo type
}

model Document {
  id String @id @default(cuid())

  name        String
  description String?

  fileName    String @unique
  contentType String
  blob        Bytes

  type String? // e.g., birth certificate, marriage certificate, death certificate

  note String?

  persons Person[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type]) // For filtering by document type
  @@index([fileName]) // For file searches
}

model Event {
  id String @id @default(cuid())

  name        String
  description String?

  type  String // e.g., graduation, immigration, military service, birth, death, marriage, divorce
  date  DateTime?
  place String?

  note String?

  persons Person[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name]) // For event name searches
  @@index([type]) // For filtering by event type
  @@index([date]) // For timeline queries
  @@index([place]) // For geographic searches
}
